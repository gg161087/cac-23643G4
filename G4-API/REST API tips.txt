terminal en raiz del proyecto:
	npm init -y
	npm i dotenv express mysql2
	npm i @babel/cli @babel/core @babel/node @babel/preset-env morgan nodemon -D
	
crear estructura base del proyecto:
	./proyecto-rest_api
		./src
			./controllers
			./routes
			./database
			index.js
			app.js
			config.js
		.env
		.babelrc

edit ./proyecto-rest_api/.env:
	PORT=3000
	HOST=localhost
	DB_HOST=bllxj36u2qg6powvyu2e-mysql.services.clever-cloud.com
	DB_NAME=bllxj36u2qg6powvyu2e
	DB_USER=ufp9jstylnskeaum
	DB_PASSWORD=v7zwBjWwSopK8FC2OM0E
	
edit ./proyecto-rest_api/.babelrc:
	{
		"presets": ["@babel/preset-env"]
	}

edit package.json:
	add:
		"type": "module",		
	edit:
		"scripts": {
			"babel-node": "babel-node --presets=@babel/preset-env",
			"dev": "nodemon --exec npm run babel-node index.js"
		},		

edit ./proyecto-rest_api/src/config.js:
	import 'dotenv/config';

	const PORT = process.env.PORT || 4000;
	const HOST = process.env.HOST || 'localhost';
	const DB_HOST = process.env.DB_HOST || 'localhost';
	const DB_NAME = process.env.DB_NAME || 'funkoshop';
	const DB_USER = process.env.DB_USER || 'root';
	const DB_PASSWORD = process.env.DB_PASSWORD || '';
	const JWT_SECRET = process.env.JWT_SECRET || 'secret';

	export {
		PORT,
		HOST,
		DB_HOST,
		DB_NAME,
		DB_USER,
		DB_PASSWORD,
		JWT_SECRET
	}
	
edit ./proyecto-rest_api/src/app.js:
	import express from 'express';
	import morgan from 'morgan';

	import { PORT } from './config.js';

	const app = express();

	//Settings
	app.set('port', PORT);

	//Middlewares
	app.use(morgan('dev'));
	app.use(express.urlencoded({extended: false}));
	app.use(express.json());

	//Routes

	export default app;

edit ./proyecto-rest_api/src/index.js:
	import app from './app.js';

	const main = () => {
		app.listen(app.get('port'), () => {
			console.log(`Server running http://localhost:${app.get('port')}`);
		});  
	};

	main();
	
crear ./proyecto-rest_api/src/database/database.js:
	import mysql from 'mysql2/promise';
	import { DB_HOST, DB_NAME, DB_USER, DB_PASSWORD } from '../config.js';

	const connection = mysql.createPool({
		host: DB_HOST,
		database: DB_NAME,
		user: DB_USER,
		password: DB_PASSWORD,
		port: 3306,
		waitForConnections: true,
		connectionLimit: 10,
		queueLimit: 0,
	});

	export const getConnection = () => {
		return connection;
	};

crear los controllers y routes correspondientes.